{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter\";\nimport authReducer from \"./auth\";\n\n// import { createStore } from \"redux\";\n\n// couterSclice의 액션들을 컴포넌트에서 사용하기 위해 actions를 export해준다.\n// export const counterActions = CounterSlice.actions;\n// export const authActions = AuthSlice.actions;\n\n// 하나의 스토어는 하나의 리듀서를 포인팅하기 때문에 configureStore의 reducer 속성값에는 통합된 하나의 리듀서를 가지고 있다.\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth: authReducer\n  }\n});\n\n// reducer는 immutable한 state. 즉 state의 불변성을 보장하기 위해 재정의가 필요하다 => state값의 볼륨이 클수록 state들을 관리하기 까다롭다.\n// 리듀서를 실행하는 action 타입의 식별자를 사용할 때, 착오를 방지하기 위해서는 상수로 따로 관리해줘야 하는 번거로움이 있다.\n// 따라서 다양한 state를 관리하는 리듀서로 쪼개어 액션을 객체로 정의할 수 있는 redux-toolkit의 slice를 사용\n\n// const CounterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       toggle: !state.toggle,\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(CounterReducer);","map":{"version":3,"names":["configureStore","counterReducer","authReducer","store","reducer","counter","auth"],"sources":["/Users/joo/Desktop/react-practice/redux/src/store/index.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter\";\nimport authReducer from \"./auth\";\n\n// import { createStore } from \"redux\";\n\n// couterSclice의 액션들을 컴포넌트에서 사용하기 위해 actions를 export해준다.\n// export const counterActions = CounterSlice.actions;\n// export const authActions = AuthSlice.actions;\n\n// 하나의 스토어는 하나의 리듀서를 포인팅하기 때문에 configureStore의 reducer 속성값에는 통합된 하나의 리듀서를 가지고 있다.\nexport const store = configureStore({\n  reducer: { counter: counterReducer, auth: authReducer },\n});\n\n// reducer는 immutable한 state. 즉 state의 불변성을 보장하기 위해 재정의가 필요하다 => state값의 볼륨이 클수록 state들을 관리하기 까다롭다.\n// 리듀서를 실행하는 action 타입의 식별자를 사용할 때, 착오를 방지하기 위해서는 상수로 따로 관리해줘야 하는 번거로움이 있다.\n// 따라서 다양한 state를 관리하는 리듀서로 쪼개어 액션을 객체로 정의할 수 있는 redux-toolkit의 slice를 사용\n\n// const CounterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       toggle: !state.toggle,\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(CounterReducer);\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,cAAc,MAAM,WAAW;AACtC,OAAOC,WAAW,MAAM,QAAQ;;AAEhC;;AAEA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAClCI,OAAO,EAAE;IAAEC,OAAO,EAAEJ,cAAc;IAAEK,IAAI,EAAEJ;EAAY;AACxD,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}