{"ast":null,"code":"// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  toggle: true\n};\nconst CounterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    toggle(state) {\n      state.toggle = !state.toggle;\n    }\n  }\n});\n\n// couterSclice의 액션들을 컴포넌트에서 사용하기 위해 actions를 export해준다.\nexport const counterActions = CounterSlice.actions;\n\n// 하나의 스토어는 하나의 리듀서를 포인팅하기 때문에 configureStore의 reducer 속성값에는 통합된 하나의 리듀서를 가지고 있다.\nexport const store = configureStore({\n  reducer: {\n    counter: CounterSlice.reducer\n  }\n});\n\n// reducer는 immutable한 state. 즉 state의 불변성을 보장하기 위해 재정의가 필요하다 => state값의 볼륨이 클수록 state들을 관리하기 까다롭다.\n// 리듀서를 실행하는 action 타입의 식별자를 사용할 때, 착오를 방지하기 위해서는 상수로 따로 관리해줘야 하는 번거로움이 있다.\n// 따라서 다양한 state를 관리하는 리듀서로 쪼개어 액션을 객체로 정의할 수 있는 redux-toolkit의 slice를 사용\n\n// const CounterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       toggle: !state.toggle,\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(CounterReducer);","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","toggle","CounterSlice","name","reducers","increment","state","decrement","counterActions","actions","store","reducer"],"sources":["/Users/joo/Desktop/react-practice/redux/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, toggle: true };\n\nconst CounterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    toggle(state) {\n      state.toggle = !state.toggle;\n    },\n  },\n});\n\n// couterSclice의 액션들을 컴포넌트에서 사용하기 위해 actions를 export해준다.\nexport const counterActions = CounterSlice.actions;\n\n// 하나의 스토어는 하나의 리듀서를 포인팅하기 때문에 configureStore의 reducer 속성값에는 통합된 하나의 리듀서를 가지고 있다.\nexport const store = configureStore({\n  reducer: { counter: CounterSlice.reducer },\n});\n\n// reducer는 immutable한 state. 즉 state의 불변성을 보장하기 위해 재정의가 필요하다 => state값의 볼륨이 클수록 state들을 관리하기 까다롭다.\n// 리듀서를 실행하는 action 타입의 식별자를 사용할 때, 착오를 방지하기 위해서는 상수로 따로 관리해줘야 하는 번거로움이 있다.\n// 따라서 다양한 state를 관리하는 리듀서로 쪼개어 액션을 객체로 정의할 수 있는 redux-toolkit의 slice를 사용\n\n// const CounterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       toggle: state.toggle,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       toggle: !state.toggle,\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(CounterReducer);\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,MAAM,EAAE;AAAK,CAAC;AAEjD,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDC,MAAMA,CAACK,KAAK,EAAE;MACZA,KAAK,CAACL,MAAM,GAAG,CAACK,KAAK,CAACL,MAAM;IAC9B;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMO,cAAc,GAAGN,YAAY,CAACO,OAAO;;AAElD;AACA,OAAO,MAAMC,KAAK,GAAGZ,cAAc,CAAC;EAClCa,OAAO,EAAE;IAAEX,OAAO,EAAEE,YAAY,CAACS;EAAQ;AAC3C,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}